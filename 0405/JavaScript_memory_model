JavaScript Memory Model : 프로그램 실행 중에 메모리가 어떻게 관리되는지 설명하는 개념


<데이터 타입>

원시타입 (primitive type) : 
원시 타입의 변수들은 데이터 복사가 일어날 때 메모리 공간을 새로 확보하여 독립적인 값을 저장 (Object가 아닌 모든 값)


객체타입(참조타입이라고도 함) (reference type) :
메모리의 주소에 대한 간접적인 참조를 통해 메모리에 접근하는 데이터 타입 (원시 타입을 제외한 모든 타입)


변경 불가능 (immutable) : 
기존 변수와 새로운 변수가 같은 주소를 가지고 있을 때, 기존 변수의 값을 변경하면
새로운 주소를 할당하여 변경된 값을 저장하고 기존 변수가 해당 주소를 가지게 되는데
이는 새로운 변수가 변경 불가능한 특징을 가진 원시 타입이기 때문이다.


Call Stack & Heap : 자바스크립트의 메모리 모델을 메모리 관점에서 보면 call stack과 heap이 있다.

콜 스택(Call Stack) : 실행중인 함수를 추적하고 계산을 수행하는 영역
힙(Heap) : 객체, 배열, 문자열 등 프로그램에서 사용하는 모든 데이터를 저장하는 영역 (참조 타입이 저장됨.)


<메모리 누수>
- 전역 변수 사용 지양
- 불필요한 객체 참조 제거


let & const : let과 const의 차이점은 immutable 의 여부
일반적으론, 가능한 한 const를 사용해야하며 변수가 변경될 때만 let을 사용해야 한다.


Garbage Collection : 변수의 필요유무를 판단하고 메모리에서 제거 (자바와 똑같음)
여러가지 내부 알고리즘을 사용하여 메모리를 최적화
ex) Reference Counting 알고리즘 : 참조를 사용하는 방식 (순환 참조를 해결할 수 없어서 잘 사용되지 않음)
ex) Mark-Sweep 알고리즘 : 루트에서 데이터까지 도달여부를 확인 후 도달할 수 없는(연결이 되어있지 않은) 데이터들은 청소


